package org.walruscode.leetcode;

public class P70_climbing_stairs {

    public int climbStairs(int n) {

        // n = 1 -> 1
        // n = 2 -> 2
        // n = 3 -> 3

        // n = 4 -> 5
        // 1 + 1 + 1 + 1
        // 1 + 1 + 2
        // 1 + 2 + 1
        // 2 + 1 + 1
        // 2 + 2

        // n = 5 -> 8
        // 1 + 1 + 1 + 1 + 1
        // 1 + 1 + 1 + 2
        // 1 + 1 + 2 + 1
        // 1 + 2 + 1 + 1
        // 2 + 1 + 1 + 1
        // 1 + 2 + 2
        // 2 + 1 + 2
        // 2 + 2 + 1

        // n = 6 -> 13
        // 1 + 1 + 1 + 1 + 1 + 1
        // 1 + 1 + 1 + 1 + 2
        // 1 + 1 + 1 + 2 + 1
        // 1 + 1 + 2 + 1 + 1
        // 1 + 2 + 1 + 1 + 1
        // 2 + 1 + 1 + 1 + 1
        // 1 + 1 + 2 + 2
        // 1 + 2 + 2 + 1
        // 2 + 1 + 1 + 2
        // 2 + 1 + 2 + 1
        // 1 + 2 + 1 + 2
        // 2 + 2 + 1 + 1
        // 2 + 2 + 2

        // n = 7 -> 21
        // 1 + 1 + 1 + 1 + 1 + 1 + 1
        // 1 + 1 + 1 + 1 + 1 + 2
        // 1 + 1 + 1 + 1 + 2 + 1
        // 1 + 1 + 1 + 2 + 1 + 1
        // 1 + 1 + 2 + 1 + 1 + 1
        // 1 + 2 + 1 + 1 + 1 + 1
        // 2 + 1 + 1 + 1 + 1 + 1
        // 2 + 1 + 1 + 1 + 2
        // 2 + 1 + 1 + 2 + 1
        // 2 + 1 + 2 + 1 + 1
        // 2 + 2 + 1 + 1 + 1
        // 1 + 1 + 1 + 2 + 2
        // 1 + 1 + 2 + 2 + 1
        // 1 + 2 + 2 + 1 + 1
        // 1 + 2 + 1 + 2 + 1
        // 1 + 1 + 2 + 1 + 2
        // 1 + 2 + 1 + 1 + 2
        // 2 + 2 + 2 + 1
        // 2 + 2 + 1 + 2
        // 2 + 1 + 2 + 2
        // 1 + 2 + 2 + 2

        if (n == 1 || n == 2 || n == 3) return n;

        int prev1 = 2;
        int prev2 = 3;

        int current = 4;
        int result = 0;

        // fibonacci
        while (current <= n) {
            result = prev1 + prev2;
            prev1 = prev2;
            prev2 = result;
            current++;
        }

        return result;
    }
}
